// src/vite-plugin.ts
import devServer, { defaultOptions } from "@hono/vite-dev-server";
import fs from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";
var vite_plugin_default = (options) => {
  return devServer({
    adapter: options?.adapter,
    entry: options.entry,
    exclude: options?.exclude ?? [
      ...defaultOptions.exclude,
      "/assets/**",
      "/src/app/**",
      // matches for vite's import assets suffixes
      /\?(?:inline|url|no-inline|raw|import(?:&(?:inline|url|no-inline|raw)?)?)$/
    ],
    injectClientScript: false,
    loadModule: async (server, entry) => {
      const appModule = await server.ssrLoadModule(entry);
      const app = appModule["default"];
      if (!app) {
        throw new Error(`Failed to find the module from ${entry}`);
      }
      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);
      const dir = __dirname;
      const tsPath = path.resolve(dir, "dev.ts");
      const jsPath = path.resolve(dir, "dev.js");
      let devPath;
      if (fs.existsSync(tsPath)) {
        devPath = tsPath;
      } else if (fs.existsSync(jsPath)) {
        devPath = jsPath;
      } else {
        throw new Error("Neither dev.ts nor dev.js found");
      }
      const devModule = await server.ssrLoadModule(devPath);
      return devModule["default"](app, {
        getLoadContext: options.getLoadContext
      });
    }
  });
};
export {
  vite_plugin_default as default
};
