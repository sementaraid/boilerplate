// src/dev.ts
import { Hono } from "hono";

// src/react-router.ts
var defaultGetLoadContext = ({ context }) => {
  return {
    ...context
  };
};
var createGetLoadContextArgs = (c) => {
  return {
    context: {
      cloudflare: {
        env: c.env,
        cf: c.req.raw.cf,
        ctx: c.executionCtx,
        // @ts-expect-error globalThis.caches is not typed
        caches: globalThis.caches ? caches : void 0
      },
      hono: {
        context: c
      }
    },
    request: c.req.raw
  };
};

// src/dev.ts
var handle = (userApp, options) => {
  const app = new Hono();
  if (userApp) {
    app.route("/", userApp);
  }
  app.all("*", async (c) => {
    const build = await import("virtual:react-router/server-build");
    const { createRequestHandler } = await import("react-router");
    const handler = createRequestHandler(build, "development");
    const getLoadContext = options?.getLoadContext ?? defaultGetLoadContext;
    const args = createGetLoadContextArgs(c);
    const reactRouterContext = getLoadContext(args);
    return handler(
      c.req.raw,
      reactRouterContext instanceof Promise ? await reactRouterContext : reactRouterContext
    );
  });
  return app;
};
var dev_default = handle;
export {
  dev_default as default,
  handle
};
