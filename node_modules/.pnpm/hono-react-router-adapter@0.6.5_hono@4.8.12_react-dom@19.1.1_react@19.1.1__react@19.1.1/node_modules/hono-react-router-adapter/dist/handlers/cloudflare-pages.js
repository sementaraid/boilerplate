// src/handlers/cloudflare-pages.ts
import { Hono } from "hono";
import { handle } from "hono/cloudflare-pages";

// src/middleware.ts
import { createMiddleware } from "hono/factory";
import { createRequestHandler } from "react-router";

// src/react-router.ts
var defaultGetLoadContext = ({ context }) => {
  return {
    ...context
  };
};
var createGetLoadContextArgs = (c) => {
  return {
    context: {
      cloudflare: {
        env: c.env,
        cf: c.req.raw.cf,
        ctx: c.executionCtx,
        // @ts-expect-error globalThis.caches is not typed
        caches: globalThis.caches ? caches : void 0
      },
      hono: {
        context: c
      }
    },
    request: c.req.raw
  };
};

// src/middleware.ts
var reactRouter = ({ mode, build, getLoadContext }) => {
  return createMiddleware(async (c) => {
    const requestHandler = createRequestHandler(build, mode);
    const args = createGetLoadContextArgs(c);
    const loadContext = getLoadContext(args);
    return await requestHandler(
      c.req.raw,
      loadContext instanceof Promise ? await loadContext : loadContext
    );
  });
};
function staticAssets(options = {}) {
  return createMiddleware(async (c, next) => {
    const binding = c.env?.ASSETS;
    if (!binding) {
      throw new ReferenceError("The binding ASSETS is not set.");
    }
    let response;
    c.req.raw.headers.delete("if-none-match");
    try {
      response = await binding.fetch(c.req.url, c.req.raw.clone());
      if (response.status >= 400) {
        return await next();
      }
      response = new Response(response.body, response);
      if (options.cache) {
        response.headers.set("cache-control", options.cache);
      }
      return response;
    } catch {
      return await next();
    }
  });
}

// src/handlers/cloudflare-pages.ts
var handler = (serverBuild, userApp, options) => {
  const app = new Hono();
  if (userApp) {
    app.route("/", userApp);
  }
  app.use(
    async (c, next) => {
      return staticAssets()(c, next);
    },
    async (c, next) => {
      return reactRouter({
        build: serverBuild,
        mode: "production",
        getLoadContext: options?.getLoadContext ?? defaultGetLoadContext
      })(c, next);
    }
  );
  return handle(app);
};
var cloudflare_pages_default = handler;
export {
  cloudflare_pages_default as default,
  handler
};
