// src/handlers/cloudflare-workers.ts
import { Hono } from "hono";

// src/middleware.ts
import { createMiddleware } from "hono/factory";
import { createRequestHandler } from "react-router";

// src/react-router.ts
var defaultGetLoadContext = ({ context }) => {
  return {
    ...context
  };
};
var createGetLoadContextArgs = (c) => {
  return {
    context: {
      cloudflare: {
        env: c.env,
        cf: c.req.raw.cf,
        ctx: c.executionCtx,
        // @ts-expect-error globalThis.caches is not typed
        caches: globalThis.caches ? caches : void 0
      },
      hono: {
        context: c
      }
    },
    request: c.req.raw
  };
};

// src/middleware.ts
var reactRouter = ({ mode, build, getLoadContext }) => {
  return createMiddleware(async (c) => {
    const requestHandler = createRequestHandler(build, mode);
    const args = createGetLoadContextArgs(c);
    const loadContext = getLoadContext(args);
    return await requestHandler(
      c.req.raw,
      loadContext instanceof Promise ? await loadContext : loadContext
    );
  });
};

// src/handlers/cloudflare-workers.ts
var handler = (serverBuild, userApp, options) => {
  const app = new Hono();
  if (userApp) {
    app.route("/", userApp);
  }
  app.use(async (c, next) => {
    return reactRouter({
      build: serverBuild,
      mode: "production",
      getLoadContext: options?.getLoadContext ?? defaultGetLoadContext
    })(c, next);
  });
  return app;
};
var cloudflare_workers_default = handler;
export {
  cloudflare_workers_default as default,
  handler
};
