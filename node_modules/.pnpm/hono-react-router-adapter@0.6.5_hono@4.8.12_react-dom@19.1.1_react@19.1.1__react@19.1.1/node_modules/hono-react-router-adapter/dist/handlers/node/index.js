// src/handlers/node/index.ts
import { Hono } from "hono";

// src/handlers/node/middleware.ts
import { createMiddleware } from "hono/factory";
import { createRequestHandler } from "react-router";

// src/handlers/node/react-router.ts
var createGetLoadContextArgs = (c) => {
  return {
    context: {},
    request: c.req.raw
  };
};

// src/handlers/node/middleware.ts
var reactRouter = ({ mode, build, getLoadContext }) => {
  return createMiddleware(async (c) => {
    const requestHandler = createRequestHandler(build, mode);
    const args = createGetLoadContextArgs(c);
    const loadContext = getLoadContext(args);
    return await requestHandler(
      c.req.raw,
      loadContext instanceof Promise ? await loadContext : loadContext
    );
  });
};

// src/handlers/node/index.ts
var defaultGetLoadContext = ({ context }) => {
  return {
    ...context
  };
};
var handler = (serverBuild, userApp, options) => {
  const app = new Hono();
  if (userApp) {
    app.route("/", userApp);
  }
  app.use(async (c, next) => {
    return reactRouter({
      build: serverBuild,
      mode: "production",
      getLoadContext: options?.getLoadContext ?? defaultGetLoadContext
    })(c, next);
  });
  return app;
};
var node_default = handler;
export {
  node_default as default,
  handler
};
